diff --git a/arch/arm/boot/compressed/lib1funcs.S b/arch/arm/boot/compressed/lib1funcs.S
new file mode 100644
index 0000000..6dc0648
--- /dev/null
+++ b/arch/arm/boot/compressed/lib1funcs.S
@@ -0,0 +1,348 @@
+/*
+ * linux/arch/arm/lib/lib1funcs.S: Optimized ARM division routines
+ *
+ * Author: Nicolas Pitre <nico@fluxnic.net>
+ *   - contributed to gcc-3.4 on Sep 30, 2003
+ *   - adapted for the Linux kernel on Oct 2, 2003
+ */
+
+/* Copyright 1995, 1996, 1998, 1999, 2000, 2003 Free Software Foundation, Inc.
+
+This file is free software; you can redistribute it and/or modify it
+under the terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option) any
+later version.
+
+In addition to the permissions in the GNU General Public License, the
+Free Software Foundation gives you unlimited permission to link the
+compiled version of this file into combinations with other programs,
+and to distribute those combinations without any restriction coming
+from the use of this file.  (The General Public License restrictions
+do apply in other respects; for example, they cover modification of
+the file, and distribution when not linked into a combine
+executable.)
+
+This file is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program; see the file COPYING.  If not, write to
+the Free Software Foundation, 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+
+#include <linux/linkage.h>
+#include <asm/assembler.h>
+
+
+.macro ARM_DIV_BODY dividend, divisor, result, curbit
+
+#if __LINUX_ARM_ARCH__ >= 5
+
+	clz	\curbit, \divisor
+	clz	\result, \dividend
+	sub	\result, \curbit, \result
+	mov	\curbit, #1
+	mov	\divisor, \divisor, lsl \result
+	mov	\curbit, \curbit, lsl \result
+	mov	\result, #0
+	
+#else
+
+	@ Initially shift the divisor left 3 bits if possible,
+	@ set curbit accordingly.  This allows for curbit to be located
+	@ at the left end of each 4 bit nibbles in the division loop
+	@ to save one loop in most cases.
+	tst	\divisor, #0xe0000000
+	moveq	\divisor, \divisor, lsl #3
+	moveq	\curbit, #8
+	movne	\curbit, #1
+
+	@ Unless the divisor is very big, shift it up in multiples of
+	@ four bits, since this is the amount of unwinding in the main
+	@ division loop.  Continue shifting until the divisor is 
+	@ larger than the dividend.
+1:	cmp	\divisor, #0x10000000
+	cmplo	\divisor, \dividend
+	movlo	\divisor, \divisor, lsl #4
+	movlo	\curbit, \curbit, lsl #4
+	blo	1b
+
+	@ For very big divisors, we must shift it a bit at a time, or
+	@ we will be in danger of overflowing.
+1:	cmp	\divisor, #0x80000000
+	cmplo	\divisor, \dividend
+	movlo	\divisor, \divisor, lsl #1
+	movlo	\curbit, \curbit, lsl #1
+	blo	1b
+
+	mov	\result, #0
+
+#endif
+
+	@ Division loop
+1:	cmp	\dividend, \divisor
+	subhs	\dividend, \dividend, \divisor
+	orrhs	\result,   \result,   \curbit
+	cmp	\dividend, \divisor,  lsr #1
+	subhs	\dividend, \dividend, \divisor, lsr #1
+	orrhs	\result,   \result,   \curbit,  lsr #1
+	cmp	\dividend, \divisor,  lsr #2
+	subhs	\dividend, \dividend, \divisor, lsr #2
+	orrhs	\result,   \result,   \curbit,  lsr #2
+	cmp	\dividend, \divisor,  lsr #3
+	subhs	\dividend, \dividend, \divisor, lsr #3
+	orrhs	\result,   \result,   \curbit,  lsr #3
+	cmp	\dividend, #0			@ Early termination?
+	movnes	\curbit,   \curbit,  lsr #4	@ No, any more bits to do?
+	movne	\divisor,  \divisor, lsr #4
+	bne	1b
+
+.endm
+
+
+.macro ARM_DIV2_ORDER divisor, order
+
+#if __LINUX_ARM_ARCH__ >= 5
+
+	clz	\order, \divisor
+	rsb	\order, \order, #31
+
+#else
+
+	cmp	\divisor, #(1 << 16)
+	movhs	\divisor, \divisor, lsr #16
+	movhs	\order, #16
+	movlo	\order, #0
+
+	cmp	\divisor, #(1 << 8)
+	movhs	\divisor, \divisor, lsr #8
+	addhs	\order, \order, #8
+
+	cmp	\divisor, #(1 << 4)
+	movhs	\divisor, \divisor, lsr #4
+	addhs	\order, \order, #4
+
+	cmp	\divisor, #(1 << 2)
+	addhi	\order, \order, #3
+	addls	\order, \order, \divisor, lsr #1
+
+#endif
+
+.endm
+
+
+.macro ARM_MOD_BODY dividend, divisor, order, spare
+
+#if __LINUX_ARM_ARCH__ >= 5
+
+	clz	\order, \divisor
+	clz	\spare, \dividend
+	sub	\order, \order, \spare
+	mov	\divisor, \divisor, lsl \order
+
+#else
+
+	mov	\order, #0
+
+	@ Unless the divisor is very big, shift it up in multiples of
+	@ four bits, since this is the amount of unwinding in the main
+	@ division loop.  Continue shifting until the divisor is 
+	@ larger than the dividend.
+1:	cmp	\divisor, #0x10000000
+	cmplo	\divisor, \dividend
+	movlo	\divisor, \divisor, lsl #4
+	addlo	\order, \order, #4
+	blo	1b
+
+	@ For very big divisors, we must shift it a bit at a time, or
+	@ we will be in danger of overflowing.
+1:	cmp	\divisor, #0x80000000
+	cmplo	\divisor, \dividend
+	movlo	\divisor, \divisor, lsl #1
+	addlo	\order, \order, #1
+	blo	1b
+
+#endif
+
+	@ Perform all needed substractions to keep only the reminder.
+	@ Do comparisons in batch of 4 first.
+	subs	\order, \order, #3		@ yes, 3 is intended here
+	blt	2f
+
+1:	cmp	\dividend, \divisor
+	subhs	\dividend, \dividend, \divisor
+	cmp	\dividend, \divisor,  lsr #1
+	subhs	\dividend, \dividend, \divisor, lsr #1
+	cmp	\dividend, \divisor,  lsr #2
+	subhs	\dividend, \dividend, \divisor, lsr #2
+	cmp	\dividend, \divisor,  lsr #3
+	subhs	\dividend, \dividend, \divisor, lsr #3
+	cmp	\dividend, #1
+	mov	\divisor, \divisor, lsr #4
+	subges	\order, \order, #4
+	bge	1b
+
+	tst	\order, #3
+	teqne	\dividend, #0
+	beq	5f
+
+	@ Either 1, 2 or 3 comparison/substractions are left.
+2:	cmn	\order, #2
+	blt	4f
+	beq	3f
+	cmp	\dividend, \divisor
+	subhs	\dividend, \dividend, \divisor
+	mov	\divisor,  \divisor,  lsr #1
+3:	cmp	\dividend, \divisor
+	subhs	\dividend, \dividend, \divisor
+	mov	\divisor,  \divisor,  lsr #1
+4:	cmp	\dividend, \divisor
+	subhs	\dividend, \dividend, \divisor
+5:
+.endm
+
+
+ENTRY(__udivsi3)
+ENTRY(__aeabi_uidiv)
+
+	subs	r2, r1, #1
+	moveq	pc, lr
+	bcc	Ldiv0
+	cmp	r0, r1
+	bls	11f
+	tst	r1, r2
+	beq	12f
+
+	ARM_DIV_BODY r0, r1, r2, r3
+
+	mov	r0, r2
+	mov	pc, lr
+
+11:	moveq	r0, #1
+	movne	r0, #0
+	mov	pc, lr
+
+12:	ARM_DIV2_ORDER r1, r2
+
+	mov	r0, r0, lsr r2
+	mov	pc, lr
+
+ENDPROC(__udivsi3)
+ENDPROC(__aeabi_uidiv)
+
+ENTRY(__umodsi3)
+
+	subs	r2, r1, #1			@ compare divisor with 1
+	bcc	Ldiv0
+	cmpne	r0, r1				@ compare dividend with divisor
+	moveq   r0, #0
+	tsthi	r1, r2				@ see if divisor is power of 2
+	andeq	r0, r0, r2
+	movls	pc, lr
+
+	ARM_MOD_BODY r0, r1, r2, r3
+
+	mov	pc, lr
+
+ENDPROC(__umodsi3)
+
+ENTRY(__divsi3)
+ENTRY(__aeabi_idiv)
+
+	cmp	r1, #0
+	eor	ip, r0, r1			@ save the sign of the result.
+	beq	Ldiv0
+	rsbmi	r1, r1, #0			@ loops below use unsigned.
+	subs	r2, r1, #1			@ division by 1 or -1 ?
+	beq	10f
+	movs	r3, r0
+	rsbmi	r3, r0, #0			@ positive dividend value
+	cmp	r3, r1
+	bls	11f
+	tst	r1, r2				@ divisor is power of 2 ?
+	beq	12f
+
+	ARM_DIV_BODY r3, r1, r0, r2
+
+	cmp	ip, #0
+	rsbmi	r0, r0, #0
+	mov	pc, lr
+
+10:	teq	ip, r0				@ same sign ?
+	rsbmi	r0, r0, #0
+	mov	pc, lr
+
+11:	movlo	r0, #0
+	moveq	r0, ip, asr #31
+	orreq	r0, r0, #1
+	mov	pc, lr
+
+12:	ARM_DIV2_ORDER r1, r2
+
+	cmp	ip, #0
+	mov	r0, r3, lsr r2
+	rsbmi	r0, r0, #0
+	mov	pc, lr
+
+ENDPROC(__divsi3)
+ENDPROC(__aeabi_idiv)
+
+ENTRY(__modsi3)
+
+	cmp	r1, #0
+	beq	Ldiv0
+	rsbmi	r1, r1, #0			@ loops below use unsigned.
+	movs	ip, r0				@ preserve sign of dividend
+	rsbmi	r0, r0, #0			@ if negative make positive
+	subs	r2, r1, #1			@ compare divisor with 1
+	cmpne	r0, r1				@ compare dividend with divisor
+	moveq	r0, #0
+	tsthi	r1, r2				@ see if divisor is power of 2
+	andeq	r0, r0, r2
+	bls	10f
+
+	ARM_MOD_BODY r0, r1, r2, r3
+
+10:	cmp	ip, #0
+	rsbmi	r0, r0, #0
+	mov	pc, lr
+
+ENDPROC(__modsi3)
+
+#ifdef CONFIG_AEABI
+
+ENTRY(__aeabi_uidivmod)
+
+	stmfd	sp!, {r0, r1, ip, lr}
+	bl	__aeabi_uidiv
+	ldmfd	sp!, {r1, r2, ip, lr}
+	mul	r3, r0, r2
+	sub	r1, r1, r3
+	mov	pc, lr
+
+ENDPROC(__aeabi_uidivmod)
+
+ENTRY(__aeabi_idivmod)
+
+	stmfd	sp!, {r0, r1, ip, lr}
+	bl	__aeabi_idiv
+	ldmfd	sp!, {r1, r2, ip, lr}
+	mul	r3, r0, r2
+	sub	r1, r1, r3
+	mov	pc, lr
+
+ENDPROC(__aeabi_idivmod)
+
+#endif
+
+Ldiv0:
+
+	str	lr, [sp, #-8]!
+	bl	__div0
+	mov	r0, #0			@ About as wrong as it could be.
+	ldr	pc, [sp], #8
+
+
diff --git a/arch/arm/mach-kirkwood/Kconfig b/arch/arm/mach-kirkwood/Kconfig
index 29b2163..dd3cd5d 100644
--- a/arch/arm/mach-kirkwood/Kconfig
+++ b/arch/arm/mach-kirkwood/Kconfig
@@ -75,6 +75,12 @@ config MACH_OPENRD_CLIENT
 	  Say 'Y' here if you want your kernel to support the
 	  Marvell OpenRD Client Board.
 
+config MACH_NETGEAR_MS2110
+	bool "Netgear MS2110 aka Stora"
+	help
+	  Say 'Y' here if you want your kernel to support the
+	  Netgear Stora.
+
 config MACH_NETSPACE_V2
 	bool "LaCie Network Space v2 NAS Board"
 	help
diff --git a/arch/arm/mach-kirkwood/Makefile b/arch/arm/mach-kirkwood/Makefile
index c0cd5d3..55031fb 100644
--- a/arch/arm/mach-kirkwood/Makefile
+++ b/arch/arm/mach-kirkwood/Makefile
@@ -11,6 +11,7 @@ obj-$(CONFIG_MACH_TS219)		+= ts219-setup.o tsx1x-common.o
 obj-$(CONFIG_MACH_TS41X)		+= ts41x-setup.o tsx1x-common.o
 obj-$(CONFIG_MACH_OPENRD)		+= openrd-setup.o
 obj-$(CONFIG_MACH_NETSPACE_V2)		+= netspace_v2-setup.o
+obj-$(CONFIG_MACH_NETGEAR_MS2110)       += netgear_ms2110-setup.o
 obj-$(CONFIG_MACH_INETSPACE_V2)		+= netspace_v2-setup.o
 obj-$(CONFIG_MACH_NET2BIG_V2)		+= netxbig_v2-setup.o
 obj-$(CONFIG_MACH_NET5BIG_V2)		+= netxbig_v2-setup.o
diff --git a/arch/arm/mach-kirkwood/mpp.h b/arch/arm/mach-kirkwood/mpp.h
index bc74278..7ce4d2f 100644
--- a/arch/arm/mach-kirkwood/mpp.h
+++ b/arch/arm/mach-kirkwood/mpp.h
@@ -223,6 +223,7 @@
 #define MPP34_GPIO		MPP( 34, 0x0, 1, 1, 0,   1,   1,   1    )
 #define MPP34_TDM_SPI_CS1	MPP( 34, 0x2, 0, 1, 0,   0,   1,   1    )
 #define MPP34_GE1_14		MPP( 34, 0x3, 0, 0, 0,   1,   1,   1    )
+#define MPP34_SATA1_ACTn	MPP( 34, 0x5, 0, 1, 0,   0,   1,   1    )
 
 #define MPP35_GPIO		MPP( 35, 0x0, 1, 1, 1,   1,   1,   1    )
 #define MPP35_TDM_CH0_TX_QL	MPP( 35, 0x2, 0, 1, 0,   0,   1,   1    )
diff --git a/arch/arm/mach-kirkwood/netgear_ms2110-setup.c b/arch/arm/mach-kirkwood/netgear_ms2110-setup.c
new file mode 100644
index 0000000..7077fcf
--- /dev/null
+++ b/arch/arm/mach-kirkwood/netgear_ms2110-setup.c
@@ -0,0 +1,279 @@
+/*
+ * arch/arm/mach-kirkwood/netgear_ms2110-setup.c 
+ *
+ * Netgear MS2110 (Stora) Board Setup
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2.  This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/mtd/partitions.h>
+#include <linux/ata_platform.h>
+#include <linux/mv643xx_eth.h>
+#include <linux/i2c.h>
+#include <linux/i2c/at24.h>
+#include <linux/input.h>
+#include <linux/gpio.h>
+#include <linux/gpio_keys.h>
+#include <linux/leds.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <mach/kirkwood.h>
+#include <plat/mvsdio.h>
+#include "common.h"
+#include "mpp.h"
+
+static struct mtd_partition netgear_ms2110_nand_parts[] = {
+	{
+		.name = "u-boot",
+		.offset = 0,
+		.size = SZ_1M
+	}, {
+		.name = "uImage",
+		.offset = MTDPART_OFS_NXTBLK,
+		.size = SZ_4M
+	}, {
+		.name = "root",
+		.offset = MTDPART_OFS_NXTBLK,
+		.size = MTDPART_SIZ_FULL
+	},
+};
+
+static struct mv643xx_eth_platform_data netgear_ms2110_ge00_data = {
+	.phy_addr	= MV643XX_ETH_PHY_ADDR(8),
+};
+
+static struct mv_sata_platform_data netgear_ms2110_sata_data = {
+	.n_ports	= 2,
+};
+
+static struct i2c_board_info  __initdata netgear_ms2110_i2c_info[] = {
+   { I2C_BOARD_INFO("pcf8563", 0x51 ) },
+   { I2C_BOARD_INFO("lm75", 0x48 ) }
+}; 
+
+#define NETGEAR_MS2110_POWER_BUTTON 36
+#define NETGEAR_MS2110_RESET_BUTTON 38
+
+static struct gpio_keys_button netgear_ms2110_buttons[] = {
+        [0] = {
+                .code           = KEY_POWER,
+                .gpio           = NETGEAR_MS2110_POWER_BUTTON,
+                .desc           = "Power push button",
+                .active_low     = 1,
+        },
+        [1] = {
+                .code           = KEY_POWER2,
+                .gpio           = NETGEAR_MS2110_RESET_BUTTON,
+                .desc           = "Reset push button",
+                .active_low     = 1,
+        },
+};
+
+static struct gpio_keys_platform_data netgear_ms2110_button_data = {
+        .buttons        = netgear_ms2110_buttons,
+        .nbuttons       = ARRAY_SIZE(netgear_ms2110_buttons),
+};
+
+static struct platform_device netgear_ms2110_gpio_buttons = {
+        .name           = "gpio-keys",
+        .id             = -1,
+        .dev            = {
+                .platform_data  = &netgear_ms2110_button_data,
+        },
+};
+
+static unsigned int netgear_ms2110_mpp_config[] __initdata = {
+	MPP0_NF_IO2,  /* nand controller */
+	MPP1_NF_IO3,  /* nand controller */
+	MPP2_NF_IO4,  /* nand controller */
+	MPP3_NF_IO5,  /* nand controller */
+	MPP4_NF_IO6,  /* nand controller */
+	MPP5_NF_IO7,  /* nand controller */
+	MPP6_SYSRST_OUTn, /* system reset out */
+	MPP7_SPI_SCn, 
+	MPP8_TW_SDA,  /* TWSI data */
+	MPP9_TW_SCK,  /* TWSI clock */
+	MPP10_UART0_TXD, /* ttyS0 tx */
+	MPP11_UART0_RXD, /* ttys0 rx */
+	MPP12_SD_CLK,
+	MPP13_SD_CMD,
+	MPP14_SD_D0,
+	MPP15_SD_D1,
+	MPP16_SD_D2,
+	MPP17_SD_D3,
+	MPP18_NF_IO0,  /* nand controller */
+	MPP19_NF_IO1,  /* nand controller */
+	MPP20_SATA1_ACTn, /* green led for drive 2 */
+	MPP21_SATA0_ACTn, /* green led for drive 1 */
+	MPP22_GPIO,   /* red led for drive 2 */
+	MPP23_GPIO,   /* red led for drive 1 */
+	MPP24_GE1_4,
+	MPP25_GE1_5,
+	MPP26_GE1_6,
+	MPP27_GE1_7,
+	MPP28_GPIO,
+	MPP29_GPIO,
+	MPP30_GPIO, 
+	MPP31_GPIO,  /* blue led for power indicator 1 */
+	MPP32_GPIO,  /* blue led for power indicator 2 */
+	MPP33_GE1_13,
+	MPP34_SATA1_ACTn, /* positively retarded, unused, and nonstandard */
+	MPP35_GPIO,
+	MPP36_GPIO,  /* power button input */
+	MPP37_GPIO,  /* reset button input */
+	MPP38_GPIO,
+	MPP39_GPIO,
+	MPP40_GPIO,  /* low output powers off board */
+	MPP41_GPIO,  /* input from fan tachometer -- kind of pointless */
+	MPP42_GPIO,
+	MPP43_GPIO,  /* Green 1000M phy led enable */
+	MPP44_GPIO,  /* Yellow 10M/100M phy led enable */
+	MPP45_TDM_PCLK, /* tp11 on the board */
+	MPP46_TDM_FS,   /* tp12 on the board */
+	MPP47_TDM_DRX,  /* tp13 on the board */
+	MPP48_TDM_DTX,  /* tp14 on the board */
+	MPP49_GPIO,     /* tp15 on the board */
+	0
+};
+
+#define NETGEAR_MS2110_GPIO_POWER_OFF 40
+
+static void netgear_ms2110_power_off(void)
+{
+        gpio_set_value(NETGEAR_MS2110_GPIO_POWER_OFF, 1);
+}
+
+#define NETGEAR_MS2110_GPIO_BLUE1_LED     31
+#define NETGEAR_MS2110_GPIO_BLUE2_LED     32
+#define NETGEAR_MS2110_GPIO_RED1_LED     23
+#define NETGEAR_MS2110_GPIO_RED2_LED     22
+
+int gpio_blink_set(unsigned gpio, unsigned long *delay_on, unsigned long *delay_off) {
+	if (*delay_on == 0 && *delay_off == 1) { 
+		/* this special case turns on hardware blinking */
+		orion_gpio_set_blink(gpio,1);
+		return 0;
+	}
+	orion_gpio_set_blink(gpio,0); /* turn off hardware blinking */
+	if (*delay_off == 0 && *delay_off == 0)
+		return 0; /* we're done */
+	else
+		return 1; /* fall back to the software blinking */
+}
+
+static struct gpio_led netgear_ms2110_gpio_led_pins[] = {
+        {
+                .name   = "blue1",
+                .gpio   = NETGEAR_MS2110_GPIO_BLUE1_LED,
+                .active_low     = 1,
+		.default_trigger = "heartbeat",
+		.default_state = LEDS_GPIO_DEFSTATE_KEEP,
+        },
+        {
+                .name   = "blue2",
+                .gpio   = NETGEAR_MS2110_GPIO_BLUE2_LED,
+                .active_low     = 1,
+		.default_trigger = "default-on",
+		.default_state = LEDS_GPIO_DEFSTATE_KEEP,
+        },
+        {
+                .name   = "red1",
+                .gpio   = NETGEAR_MS2110_GPIO_RED1_LED,
+                .active_low     = 1,
+		.default_trigger = "none",
+		.default_state = LEDS_GPIO_DEFSTATE_KEEP,
+        },
+        {
+                .name   = "red2",
+                .gpio   = NETGEAR_MS2110_GPIO_RED2_LED,
+                .active_low     = 1,
+		.default_trigger = "none",
+		.default_state = LEDS_GPIO_DEFSTATE_KEEP,
+        },
+};
+
+static struct gpio_led_platform_data netgear_ms2110_gpio_leds_data = {
+        .num_leds       = ARRAY_SIZE(netgear_ms2110_gpio_led_pins),
+        .leds           = netgear_ms2110_gpio_led_pins,
+	.gpio_blink_set = &gpio_blink_set,
+};
+
+
+static struct platform_device netgear_ms2110_gpio_leds = {
+        .name           = "leds-gpio",
+        .id             = -1,
+        .dev            = {
+                .platform_data  = &netgear_ms2110_gpio_leds_data,
+        },
+};
+
+static void __init netgear_ms2110_init(void)
+{
+	/*
+	 * Basic setup. Needs to be called early.
+	 */
+	kirkwood_init();
+	kirkwood_mpp_conf(netgear_ms2110_mpp_config);
+
+	kirkwood_uart0_init();
+	kirkwood_nand_init(ARRAY_AND_SIZE(netgear_ms2110_nand_parts), 25);
+
+	kirkwood_ehci_init();
+
+	kirkwood_ge00_init(&netgear_ms2110_ge00_data);
+	kirkwood_sata_init(&netgear_ms2110_sata_data);
+
+	kirkwood_i2c_init();
+	i2c_register_board_info(0, netgear_ms2110_i2c_info,
+                                ARRAY_SIZE(netgear_ms2110_i2c_info));
+        
+	platform_device_register(&netgear_ms2110_gpio_buttons);
+
+	if (gpio_request(NETGEAR_MS2110_GPIO_POWER_OFF, "power-off") == 0 &&
+            gpio_direction_output(NETGEAR_MS2110_GPIO_POWER_OFF, 0) == 0)
+                pm_power_off = netgear_ms2110_power_off;
+        else
+                pr_err("netgear_ms2110: failed to configure power-off GPIO\n");
+
+	if (gpio_request(NETGEAR_MS2110_GPIO_BLUE1_LED,"power-light1") == 0 &&
+	    gpio_direction_output(NETGEAR_MS2110_GPIO_BLUE1_LED, 0) == 0) {
+	        gpio_set_value(NETGEAR_MS2110_GPIO_BLUE1_LED,0);
+	        orion_gpio_set_blink(NETGEAR_MS2110_GPIO_BLUE1_LED,0);
+            } else
+	        pr_err("netgear_ms2110: failed to configure blue LED1\n");
+	if (gpio_request(NETGEAR_MS2110_GPIO_BLUE2_LED,"power-light2") == 0 &&
+	    gpio_direction_output(NETGEAR_MS2110_GPIO_BLUE2_LED, 0) == 0) {
+	        gpio_set_value(NETGEAR_MS2110_GPIO_BLUE2_LED,0);
+	        orion_gpio_set_blink(NETGEAR_MS2110_GPIO_BLUE2_LED,0);
+            } else
+	        pr_err("netgear_ms2110: failed to configure blue LED2\n");
+	gpio_free(NETGEAR_MS2110_GPIO_BLUE1_LED);
+	gpio_free(NETGEAR_MS2110_GPIO_BLUE2_LED);
+        platform_device_register(&netgear_ms2110_gpio_leds);
+
+}
+
+static int __init netgear_ms2110_pci_init(void)
+{
+	if (machine_is_netgear_ms2110())
+		kirkwood_pcie_init();
+
+	return 0;
+ }
+subsys_initcall(netgear_ms2110_pci_init);
+
+
+MACHINE_START(NETGEAR_MS2110, "Netgear MS2110")
+	.phys_io	= KIRKWOOD_REGS_PHYS_BASE,
+	.io_pg_offst	= ((KIRKWOOD_REGS_VIRT_BASE) >> 18) & 0xfffc,
+	.boot_params	= 0x00000100,
+	.init_machine	= netgear_ms2110_init,
+	.map_io		= kirkwood_map_io,
+	.init_irq	= kirkwood_init_irq,
+	.timer		= &kirkwood_timer,
+MACHINE_END
